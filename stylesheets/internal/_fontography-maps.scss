/**
 * @file
 * fontography-maps
 *
 * SASS font registry. Stores a precise list of fonts for use in a project.
 * Uses sass-maps to store the registry. This method is useful for keeping stylesheets simpler, but does not work with libsass.
 */

/**
 * FONTOGRAPHY
 *
 * Displays registered fonts.
 * 
 * @variables:
 * $fonto-style: Required. Name of the font style. Defaults to normal.
 * $fonto-color: Color for the font. Overrides any font colors declared for the style. Defaults to false.
 * $fonto-debug: Prints an invalid CSS style called 'font-style-name' for use in debugging. Does not print if false. Defaults to false.
 * 
 */  
@mixin fontography (
  $fonto-style: $fonto-style,
  $fonto-color: $fonto-color,
  $fonto-rhythm-unit: $fonto-rhythm-unit,
  $fonto-debug: $fonto-debug
) {

  @if $fonto-debug != false {
    font-style-name: $fonto-style;
  }
  
  // check rhythm units
  $original-rhythm-unit: false;
  @if $fonto-rhythm-unit != $rhythm-unit {
    $original-rhythm-unit: $rhythm-unit;
    $rhythm-unit: $fonto-rhythm-unit;
  }

  @if map-has-key($fontography, $fonto-style){
    
    // get the key
    $style: map-get($fontography, $fonto-style);
    
    // get the font values
    $color: map-get($style, 'color');
    $size: map-get($style, 'size');
    $family: map-get($style, 'family');
    $set-lines: map-get($style, 'lines');
    $weight: map-get($style, 'weight');
    $font-style: map-get($style, 'font-style');
    $padding: map-get($style, 'padding');
    $margin: map-get($style, 'margin');
    $text-align: map-get($style, 'text-align');
    $text-decoration: map-get($style, 'text-decoration');
    $text-shadow: map-get($style, 'text-shadow');
    $text-transform: map-get($style, 'text-transform');
    $white-space: map-get($style, 'white-space');
    $letter-spacing: map-get($style, 'letter-spacing');
    $border-top: map-get($style, 'border-top');
    $border-bottom: map-get($style, 'border-bottom');
    $border-left: map-get($style, 'border-left');
    $border-right: map-get($style, 'border-right');
    $hover-color: map-get($style, 'hover-color');
    $hover-weight: map-get($style, 'hover-color');
    $hover-font-style: map-get($style, 'hover-font-style');
    $hover-padding: map-get($style, 'hover-padding');
    $hover-margin: map-get($style, 'hover-margin');
    $hover-text-decoration: map-get($style, 'hover-text-decoration');
    $hover-text-shadow: map-get($style, 'hover-text-shadow');
    $active-color: map-get($style, 'active-color');
    $active-weight: map-get($style, 'active-weight');
    $active-font-style: map-get($style, 'active-font-style');
    $active-padding: map-get($style, 'active-padding');
    $active-margin: map-get($style, 'active-margin');
    $active-text-decoration: map-get($style, 'active-text-decoration');
    $active-text-shadow: map-get($style, 'active-text-shadow');
    $focus-color: map-get($style, 'focus-color');
    $focus-weight: map-get($style, 'focus-weight');
    $focus-font-style: map-get($style, 'focus-font-style');
    $focus-padding: map-get($style, 'focus-padding');
    $focus-margin: map-get($style, 'focus-margin');
    $focus-text-decoration: map-get($style, 'focus-text-decoration');
    $focus-text-shadow: map-get($style, 'focus-text-shadow');
    
    // font color
    // allow colors to be overridden
    @if $color != false and $color != null and $fonto-color == false {
      color: $color;
    }
    @if $fonto-color != false {
      color: $fonto-color;
    }
    // font family
    @if $family != false and  $family != null {
      font-family: $family;
    }
    // font weight
    @if $weight != false and  $weight != null {
      font-weight: $weight;
    }
    // font size
    @if $size != false and $size != null {
      @if $set-lines == false {
        $set-lines: 1;
      }
      @include adjust-font-size-to($size, $lines: $set-lines);
    }
    // font-style
    @if $font-style != false and  $font-style != null {
      font-style: $font-style;
    }
    // padding
    @if $padding != false and  $padding != null {
      padding: $padding;
    }
    // margin
    @if $margin != false and  $margin != null {
      margin: $margin;
    }
    // text-align
    @if $text-align != false and  $text-align != null {
      text-align: $text-align;
    }
    // text-decoration
    @if $text-decoration != false and  $text-decoration != null {
      text-decoration: $text-decoration;
    }
    // text-shadow
    @if $text-shadow != false and  $text-shadow != null {
      @include text-shadow($text-shadow);
    }
    // text transform
    @if $text-transform != false and $text-transform != null {
      text-transform: $text-transform;
    }
    // text transform
    @if $letter-spacing != false and $letter-spacing != null {
      letter-spacing: $letter-spacing;
    }
    // text transform
    @if $white-space != false and $white-space != null {
      white-space: $white-space;
    }
    // borders
    @if $border-top != false and $border-top != null {
      border-bottom: $border-top;
    }
    @if $border-bottom != false and $border-bottom != null {
      border-bottom: $border-bottom;
    }
    @if $border-top != false and $border-top != null {
      border-left: $border-left;
    }
    @if $border-right != false and $border-right != null {
      border-top: $border-right;
    }
    
    // hover styles
    @if $hover-color != false or $hover-weight != false or $hover-font-style != false or $hover-padding != false or $hover-margin != false or $hover-text-decoration != false or $hover-text-shadow != false {
      &:hover {
        // font color
        @if $hover-color != false and $hover-color != null {
          color: $hover-color;
        }
        // font weight
        @if $hover-weight != false and  $hover-weight != null {
          font-weight: $hover-weight;
        }
        // font-style
        @if $hover-font-style != false and  $hover-font-style != null {
          font-style: $hover-font-style;
        }
        // padding
        @if $hover-padding != false and  $hover-padding != null {
          padding: $hover-padding;
        }
        // margin
        @if $hover-margin != false and  $hover-margin != null {
          margin: $hover-margin;
        }
        // text-decoration
        @if $hover-text-decoration != false and  $hover-text-decoration != null {
          text-decoration: $hover-text-decoration;
        }
        // text-shadow
        @if $hover-text-shadow != false and  $hover-text-shadow != null {
          @include text-shadow($hover-text-shadow);
        }
      }
    }
    
    // active styles
    @if $active-color != false or $active-weight != false or $active-font-style != false or $active-padding != false or $active-margin != false or $active-text-decoration != false or $active-text-shadow != false {
      &:active {
        // font color
        @if $active-color != false and $active-color != null {
          color: $active-color;
        }
        // font weight
        @if $active-weight != false and  $active-weight != null {
          font-weight: $active-weight;
        }
        // font-style
        @if $active-font-style != false and  $active-font-style != null {
          font-style: $active-font-style;
        }
        // padding
        @if $active-padding != false and  $active-padding != null {
          padding: $active-padding;
        }
        // margin
        @if $active-margin != false and  $active-margin != null {
          margin: $active-margin;
        }
        // text-decoration
        @if $active-text-decoration != false and  $active-text-decoration != null {
          text-decoration: $active-text-decoration;
        }
        // text-shadow
        @if $active-text-shadow != false and  $active-text-shadow != null {
          @include text-shadow($active-text-shadow);
        }
      }
    }

    // focus styles
    @if $focus-color != false or $focus-weight != false or $focus-font-style != false or $focus-padding != false or $focus-margin != false or $focus-text-decoration != false or $focus-text-shadow != false {
      &:focus {
        // font color
        @if $focus-color != false and $focus-color != null {
          color: $focus-color;
        }
        // font weight
        @if $focus-weight != false and  $focus-weight != null {
          font-weight: $focus-weight;
        }
        // font-style
        @if $focus-font-style != false and  $focus-font-style != null {
          font-style: $focus-font-style;
        }
        // padding
        @if $focus-padding != false and  $focus-padding != null {
          padding: $focus-padding;
        }
        // margin
        @if $focus-margin != false and  $focus-margin != null {
          margin: $focus-margin;
        }
        // text-decoration
        @if $focus-text-decoration != false and  $focus-text-decoration != null {
          text-decoration: $focus-text-decoration;
        }
        // text-shadow
        @if $focus-text-shadow != false and  $focus-text-shadow != null {
          @include text-shadow($focus-text-shadow);
        }
      }
    }
  }
  
  // set the rhythm unit back to the original
  @if $original-rhythm-unit != false {
    $rhythm-unit: $original-rhythm-unit;
  }
  
}

/**
 * AO FONTOGRAPHY - REGISTER STYLE
 *
 * Registers a style for presenting fonts.
 * 
 * @variables:
 * $fonto-style: Name of the font style.
 * $fonto-color: Color for the font.
 * 
 */  
@function fontography-register-style (
  $fonto-style-name:                     $fonto-style-name,
  $fonto-style-color:                    $fonto-style-color,
  $fonto-style-size:                     $fonto-style-size,
  $fonto-style-lines:                    $fonto-style-lines,
  $fonto-style-family:                   $fonto-style-family,
  $fonto-style-weight:                   $fonto-style-weight,
  $fonto-style-text-transform:           $fonto-style-text-transform,
  $fonto-style-letter-spacing:           $fonto-style-letter-spacing,
  $fonto-style-font-style:               $fonto-style-font-style,
  $fonto-style-padding:                  $fonto-style-padding,
  $fonto-style-margin:                   $fonto-style-margin,
  $fonto-style-text-align:               $fonto-style-text-align,
  $fonto-style-text-decoration:          $fonto-style-text-decoration,
  $fonto-style-text-shadow:              $fonto-style-text-shadow,
  $fonto-style-white-space:              $fonto-style-white-space,
  $fonto-style-border-top:               $fonto-style-border-top,
  $fonto-style-border-bottom:            $fonto-style-border-bottom,
  $fonto-style-border-left:              $fonto-style-border-left,
  $fonto-style-border-right:             $fonto-style-border-right,
  $fonto-style-hover-color:              $fonto-style-hover-color,
  $fonto-style-hover-font-style:         $fonto-style-hover-font-style,
  $fonto-style-hover-padding:            $fonto-style-hover-padding,
  $fonto-style-hover-margin:             $fonto-style-hover-margin,
  $fonto-style-hover-text-decoration:    $fonto-style-hover-text-decoration,
  $fonto-style-hover-text-shadow:        $fonto-style-hover-text-shadow,
  $fonto-style-active-color:             $fonto-style-active-color,
  $fonto-style-active-weight:            $fonto-style-active-weight,
  $fonto-style-active-font-style:        $fonto-style-active-font-style,
  $fonto-style-active-padding:           $fonto-style-active-padding,
  $fonto-style-active-margin:            $fonto-style-active-margin,
  $fonto-style-active-text-decoration:   $fonto-style-active-text-decoration,
  $fonto-style-active-text-shadow:       $fonto-style-active-text-shadow,
  $fonto-style-focus-color:              $fonto-style-focus-color,
  $fonto-style-focus-weight:             $fonto-style-focus-weight,
  $fonto-style-focus-font-style:         $fonto-style-focus-font-style,
  $fonto-style-focus-padding:            $fonto-style-focus-padding,
  $fonto-style-focus-margin:             $fonto-style-focus-margin,
  $fonto-style-focus-text-decoration:    $fonto-style-focus-text-decoration,
  $fonto-style-focus-text-shadow:        $fonto-style-focus-text-shadow
) {
  // check that there is a valid name for the style
  @if $fonto-style-name != false {
    $newmap: (
      $fonto-style-name: (
        color: $fonto-style-color,
        size: $fonto-style-size,
        lines: $fonto-style-lines,
        family: $fonto-style-family,
        weight: $fonto-style-weight,
        font-style: $fonto-style-font-style,
        padding: $fonto-style-padding,
        margin: $fonto-style-margin,
        text-align: $fonto-style-text-align,
        text-transform: $fonto-style-text-transform,
        letter-spacing: $fonto-style-letter-spacing,
        text-decoration: $fonto-style-text-decoration,
        text-shadow: $fonto-style-text-shadow,
        white-space: $fonto-style-white-space,
        border-top: $fonto-style-border-top,
        border-bottom: $fonto-style-border-bottom,
        border-left: $fonto-style-border-left,
        border-right: $fonto-style-border-right,
        hover-color: $fonto-style-hover-color,
        hover-font-style: $fonto-style-hover-font-style,
        hover-padding: $fonto-style-hover-padding,
        hover-margin: $fonto-style-hover-margin,
        hover-text-decoration: $fonto-style-hover-text-decoration,
        hover-text-shadow: $fonto-style-hover-text-shadow,
        active-color: $fonto-style-active-color,
        active-weight: $fonto-style-active-weight,
        active-font-style: $fonto-style-active-font-style,
        active-padding: $fonto-style-active-padding,
        active-margin: $fonto-style-active-margin,
        active-text-decoration: $fonto-style-active-text-decoration,
        active-text-shadow: $fonto-style-active-text-shadow,
        focus-color: $fonto-style-focus-color,
        focus-weight: $fonto-style-focus-weight,
        focus-font-style: $fonto-style-focus-font-style,
        focus-padding: $fonto-style-focus-padding,
        focus-margin: $fonto-style-focus-margin,
        focus-text-decoration: $fonto-style-focus-text-decoration,
        focus-text-shadow: $fonto-style-focus-text-shadow
      )
    );
    $fontography: map-merge($fontography, $newmap);
    @return true;
  }
  @return false;
}

